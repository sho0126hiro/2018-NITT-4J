/***  mon1ex05.txt  ***/

1．課題
	FF200から機械語プログラムを置きなさい。
	スタックポインタにFFF00をセットする。
	レジスタER0にff0088ccをセットする。
	レジスタER0をpushする。
	レジスタER2にpopする。

	作成したプログラム本体を報告に載せなさい。

	1命令ずつ実行すると
	ER0,ER2,PC（プログラムカウンタ）SP（スタックポインタ，ER7と同じ）,FFEF0からFFF00までのメモリの様子
	はどうなるか，観察して，全実行結果を報告しなさい。

	push命令実行直前のスタックポインタの値，実行直後のスタックポインタの値，どのレジスタの内容がどこのアドレスのメモリに格納されたのか，
	（ここでは4バイトの値のはずなので，何番地から何番地までのメモリに格納されたのか），関連を考えて考察の文中 に盛り込みなさい。
	pop命令実行直前のスタックポインタの値，実行直後のスタックポインタの値，どこのメモリの内容がどこのレジスタに書き戻されたか
	（ここでは4バイトの値のはずなので，何番地から何番地までのメモリから書き戻されたのか），関連を考えて考察の文中に盛り込みなさい。

	「push.l er0」によってなにが起こるのか，まとめに盛り込みなさい。
	「pop.l er2」によってなにが起こるのか，まとめに盛り込みなさい。

2．使用したプログラム・実行結果
	teratarmのログを以下に示す．

	  H8/3048 Series Advanced Mode Monitor Ver. 3.0A
	 Copyright (C) 2003 Renesas Technology Corp.
	
	/*プログラム入力部*/
	: a ff200
	  FF200   >  mov.l #fff00:32,er7
	  FF206   >  mov.l #ff0088cc:32,er0
	  FF20C   >  push.l er0
	  FF210   >  pop.l er2
	  FF214   >  .
	
	/*逆アセンブルで確認*/
	: da ff200 ff200
	  <ADDR>  <CODE>                <MNEMONIC> <OPERAND>
	  FF200   7A07000FFF00          MOV.L      #H'000FFF00:32,ER7
	  FF206   7A00FF0088CC          MOV.L      #H'FF0088CC:32,ER0
	  FF20C   01006DF0              PUSH.L     ER0
	  FF210   01006D72              POP.L      ER2
	
	/*プログラムカウンタをセット*/
	: .pc
	  PC=000000  ?  ff200
	  CCR=80  ?  .
	
	/*プログラムカウンタの確認*/
	: d ffef0 fff00
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FFEF0   AF FE F3 F7 88 88 28 1A  00 0F F2 12 FF 00 88 CC   "......(........."
	  FFF00   7F 
	: r
	  PC=0FF200  CCR=80:I.......  SP=000FFF00
	  ER0=00000000  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	
	/*実行*/
	: s
	  PC=0FF206  CCR=80:I.......  SP=000FFF00
	  ER0=00000000  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF200   7A07000FFF00          MOV.L      #H'000FFF00:32,ER7
	: s
	  PC=0FF20C  CCR=88:I...N...  SP=000FFF00
	  ER0=FF0088CC  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF206   7A00FF0088CC          MOV.L      #H'FF0088CC:32,ER0
	: s
	  PC=0FF210  CCR=88:I...N...  SP=000FFEFC
	  ER0=FF0088CC  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEFC
	  FF20C   01006DF0              PUSH.L     ER0
	: d ffef0 fff00
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FFEF0   AF FE F3 F7 88 88 28 1A  00 0F F2 12 FF 00 88 CC   "......(........."
	  FFF00   7F 
	: s
	  PC=0FF214  CCR=88:I...N...  SP=000FFF00
	  ER0=FF0088CC  ER1=00000000  ER2=FF0088CC  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF210   01006D72              POP.L      ER2
	: d ffef0 fff00
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FFEF0   AF FE F3 F7 88 88 28 1A  88 88 28 1A 00 0F F2 16   "......(...(....."
	  FFF00   7F                                                 "."
	: 

3．考察
	実行の様子をまとめた。
	1．スタックポインタをER7に、FFF00をセット
		ER7=000FFF00
	2．レジスタER0にff0088ccをセット
		ER0=00000000 >> ER0=FF0088CC に変化
	3．レジスタER0をpush
		ER0=FF0088CC >> ER0=FF0088CC
		SP =000FFF00  >> SP =000FFEFC
 		ER7=000FFF00 >> ER7=000FFF00
		
		FFEF0-FFF00 : AF FE F3 F7 88 88 28 1A  00 0F F2 12 FF 00 88 CC
	4．レジスタER2にpop
		ER2=00000000 >> ER2=FF0088CC
		ER7=000FFEFC >> ER7=000FFF00
		SP =000FFEFC >> SP =000FFF00
		FFEF0-FFF00 : AF FE F3 F7 88 88 28 1A  88 88 28 1A 00 0F F2 16
		
	push：レジスタにプッシュした分のバイト数がひかれ、スタックポインタに代入される。
	　　　上のプログラムで格納されたアドレス >> 000FFEFC-000FFF00
	　　　格納されるアドレスは格納するデータの
	pop ：スタックポインタの値は元あったデータに変わる
		（同じ場合もあるが、今回は値が上のプログラムで格納されたアドレス >> 000FFEFC-000FFF00変化した）
	　　　00 0F F2 12 FF 00 88 CC　>> 88 88 28 1A 00 0F F2 16
	　　　上のプログラムで書き戻されたアドレス >> 000FFEFC-000FFF00

4．まとめ
	push,pop命令について理解した。
	
	push.l er0 によって起こること
		ER0に入っているデータをスタックポインタに代入する。
		ただし、スタックポインタはメモリの後ろから前に代入するため、データ量だけスタックポイントの値が引かれる。
	pop.l er2 によって起こること
		ER2に入っているデータに、スタックポインタが示すデータ（今ならER1）を代入する。
		そして、今までそのデータが入っていたレジスタ(ER1)のデータが元のデータに置き換わる。