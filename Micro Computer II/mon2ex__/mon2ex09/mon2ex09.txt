/***  mon2ex09.txt  ***/

1．課題
	テキストエディタとアセンブラを用 いて次のプログラムを作成しなさい。
	FF200から機械語プログラムを置きなさい。
	FF800番地 - FF801番地に2バイトの値Aが，FF802番地 - FF803番地に2バイトの値B があり，
	それぞれ整数であるとして，この2数の商（A/B）と余り（A%B）を求め，
	FF804番地 - FF805番地とFF806番地 - FF807番地に保存するプログラム。
	値が正の数・負の数にかかわらず「正の余り」を持ち，
	「（A - 余 り）÷B＝商」の関係をもつこと。
	以下の例で検証しなさい。
	11÷4 ＝ 2...余り3
	(-11)÷4 = -3...余り1
	11÷(-4) = -2...余り3
	(-11)÷(-4) = 3...余り1
	0による割り算は行わないものとする。

	ただしDIVで始まる割算命令を用いてはならない。

	プログラム本体および以下を報告しなさい。
	プログラムが正しく動作していることを検証し，検証の様子も報告しなさい。

2．使用したプログラム・実行結果
	//もとにしたCプログラム
	short int x00=0xfff5;
	short int x10=0x0004;
	short int y0,y1; /* x00 div x10 = y1 ... y0 */

	int main()
	{
	    short int x0,x1,x2,x3,xt;
	    short int opecase;
	    x0=x00;
	    x1=x10;
	    xt=x10;
	    /*P-M判定*/
	    if (0<x0) {
	        if (0<x1) {
	            opecase=0; /*P-P*/
	        } else {
	            opecase=1; /*P-M*/
	            x1=-x1;
	        }
	    } else {
	        if (0<x1) {
	            opecase=2; /*M-P*/
	            x0=-x0;
	        } else {
	            opecase=3; /*M-M*/
	            x1=-x1;
	            x0=-x0;
	            xt=-xt;
	        }
	    }
	    /*P-M判定おわり*/
	    x2=0;
	    x3=1;
	    /*割り算のプログラム*/
	    while (x1<x0) {
	        x1<<=1;
	        x3<<=1;
	    }
	    while (x3!=0) {
	        if(x1<=x0) {
	            x0-=x1;
	            x2+=x3;
	        }
	        x1>>=1;
	        x3>>=1;
	    }
	    /*割り算終わり*/
	    /*符号変更*/
	    if (opecase==0) {
	    } else if (opecase==1) {
	        x2=-x2;
	    } else  {
	        if (0<x0) {
	            x0=xt-x0;
	            x2++;
	        }
	        if (opecase==2) {
	            x2=-x2;
	        }
	    }
	    y1=x2;
	    y0=x0;
	}
	
	//作成したアセンブリプログラム
	    .CPU 300HA
	    .SECTION A,DATA,LOCATE=H'0FF030
	    .DATA.L H'0FF200  ;リセットベクトル

	    .SECTION P,CODE,LOCATE=H'0FF200
	    MOV.L  #H'FFF00,ER7  ;スタックポインタ設定
	_main:                           ; function: main
	          PUSH.L      ER4
	          MOV.W       @H'0FF800:24,E0
	          MOV.W       @H'0FF802:24,R0
	          MOV.W       R0,R1
	          MOV.W       R0,E4
	          MOV.W       E0,E0
	          BLE         L27:8
	          MOV.W       R1,R1
	          BLE         L28:8
	          SUB.W       R4,R4
	          BRA         L30:8
	L28:                              
	          MOV.W       #1:16,R4
	          MOV.W       R1,R0
	          NEG.W       R0
	          MOV.W       R0,R1
	          BRA         L30:8
	L27:                              
	          MOV.W       R1,R1
	          BLE         L31:8
	          MOV.W       #2:16,R4
	          MOV.W       E0,R0
	          NEG.W       R0
	          MOV.W       R0,E0
	          BRA         L32:8
	L31:                              
	          MOV.W       #3:16,R4
	          MOV.W       R1,R0
	          NEG.W       R0
	          MOV.W       R0,R1
	          MOV.W       E0,R0
	          NEG.W       R0
	          MOV.W       R0,E0
	          MOV.W       E4,R0
	          NEG.W       R0
	          MOV.W       R0,E4
	L32:                              
	L30:                              
	          SUB.W       E1,E1
	          MOV.W       #1:16,R0
	          BRA         L34:8
	L33:                              
	          SHLL.W      R1
	          SHLL.W      R0
	L34:                              
	          CMP.W       E0,R1
	          BLT         L33:8
	          BRA         L36:8
	L35:                              
	          CMP.W       E0,R1
	          BGT         L37:8
	          SUB.W       R1,E0
	          ADD.W       R0,E1
	L37:                              
	          SHAR.W      R1
	          SHAR.W      R0
	L36:                              
	          MOV.W       R0,R0
	          BNE         L35:8
	          MOV.W       R4,R4
	          BEQ         L39:8
	          CMP.W       #1:16,R4
	          BNE         L40:8
	          MOV.W       E1,R0
	          NEG.W       R0
	          MOV.W       R0,E1
	          BRA         L41:8
	L40:                              
	          MOV.W       E0,E0
	          BLE         L42:8
	          SUB.W       E0,E4
	          MOV.W       E4,E0
	          INC.W       #1,E1
	L42:                              
	          CMP.W       #2:16,R4
	          BNE         L43:8
	          MOV.W       E1,R0
	          NEG.W       R0
	          MOV.W       R0,E1
	L43:                              
	L41:                              
	L39:                              
	          MOV.W       E1,@H'0FF804:24
	          MOV.W       E0,@H'0FF806:24
	          POP.L       ER4
	EternalLoop:
	    BRA EternalLoop ;永久ループ
	    .END

	//Tera Termのログ
	H8/3048 Series Advanced Mode Monitor Ver. 3.0A
	 Copyright (C) 2003 Renesas Technology Corp.

	: l
	  Top Address=FF030
	  End Address=FF2B3
	: da ff200 ff2b2
	  <ADDR>  <CODE>                <MNEMONIC> <OPERAND>
	  FF200   7A07000FFF00          MOV.L      #H'000FFF00:32,ER7
	  FF206   01006DF4              PUSH.L     ER4
	  FF20A   6B28000FF800          MOV.W      @H'FF800:24,E0
	  FF210   6B20000FF802          MOV.W      @H'FF802:24,R0
	  FF216   0D01                  MOV.W      R0,R1
	  FF218   0D0C                  MOV.W      R0,E4
	  FF21A   0D88                  MOV.W      E0,E0
	  FF21C   4F14                  BLE        FF232:8
	  FF21E   0D11                  MOV.W      R1,R1
	  FF220   4F04                  BLE        FF226:8
	  FF222   1944                  SUB.W      R4,R4
	  FF224   4032                  BRA        FF258:8
	  FF226   79040001              MOV.W      #H'0001:16,R4
	  FF22A   0D10                  MOV.W      R1,R0
	  FF22C   1790                  NEG.W      R0
	  FF22E   0D01                  MOV.W      R0,R1
	  FF230   4026                  BRA        FF258:8
	  FF232   0D11                  MOV.W      R1,R1
	  FF234   4F0C                  BLE        FF242:8
	  FF236   79040002              MOV.W      #H'0002:16,R4
	  FF23A   0D80                  MOV.W      E0,R0
	  FF23C   1790                  NEG.W      R0
	  FF23E   0D08                  MOV.W      R0,E0
	  FF240   4016                  BRA        FF258:8
	  FF242   79040003              MOV.W      #H'0003:16,R4
	  FF246   0D10                  MOV.W      R1,R0
	  FF248   1790                  NEG.W      R0
	  FF24A   0D01                  MOV.W      R0,R1
	  FF24C   0D80                  MOV.W      E0,R0
	  FF24E   1790                  NEG.W      R0
	  FF250   0D08                  MOV.W      R0,E0
	  FF252   0DC0                  MOV.W      E4,R0
	  FF254   1790                  NEG.W      R0
	  FF256   0D0C                  MOV.W      R0,E4
	  FF258   1999                  SUB.W      E1,E1
	  FF25A   79000001              MOV.W      #H'0001:16,R0
	  FF25E   4004                  BRA        FF264:8
	  FF260   1011                  SHLL.W     R1
	  FF262   1010                  SHLL.W     R0
	  FF264   1D81                  CMP.W      E0,R1
	  FF266   4DF8                  BLT        FF260:8
	  FF268   400C                  BRA        FF276:8
	  FF26A   1D81                  CMP.W      E0,R1
	  FF26C   4E04                  BGT        FF272:8
	  FF26E   1918                  SUB.W      R1,E0
	  FF270   0909                  ADD.W      R0,E1
	  FF272   1191                  SHAR.W     R1
	  FF274   1190                  SHAR.W     R0
	  FF276   0D00                  MOV.W      R0,R0
	  FF278   46F0                  BNE        FF26A:8
	  FF27A   0D44                  MOV.W      R4,R4
	  FF27C   4724                  BEQ        FF2A2:8
	  FF27E   79240001              CMP.W      #H'0001:16,R4
	  FF282   4608                  BNE        FF28C:8
	  FF284   0D90                  MOV.W      E1,R0
	  FF286   1790                  NEG.W      R0
	  FF288   0D09                  MOV.W      R0,E1
	  FF28A   4016                  BRA        FF2A2:8
	  FF28C   0D88                  MOV.W      E0,E0
	  FF28E   4F06                  BLE        FF296:8
	  FF290   198C                  SUB.W      E0,E4
	  FF292   0DC8                  MOV.W      E4,E0
	  FF294   0B59                  INC.W      #1,E1
	  FF296   79240002              CMP.W      #H'0002:16,R4
	  FF29A   4606                  BNE        FF2A2:8
	  FF29C   0D90                  MOV.W      E1,R0
	  FF29E   1790                  NEG.W      R0
	  FF2A0   0D09                  MOV.W      R0,E1
	  FF2A2   6BA9000FF804          MOV.W      E1,@H'FF804:24
	  FF2A8   6BA8000FF806          MOV.W      E0,@H'FF806:24
	  FF2AE   01006D74              POP.L      ER4
	  FF2B2   40FE                  BRA        FF2B2:8
	: b ff2b2
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   FF FF FF FF FF FF FD 01  7F FF FF FF 7B FF F7 FF   "............{..."
	: m ff800
	  FF800   FF  ?  00
	  FF801   FF  ?  0b
	  FF802   FF  ?  00
	  FF803   FF  ?  04
	  FF804   FF  ?  .
	: .pc
	  PC=0FF200  ?  ff200
	  CCR=80  ?  .
	: g
	  Break at PC=FF2B2
	  PC=0FF2B2  CCR=85:I....Z.C  SP=000FFF00
	  ER0=00030000  ER1=00020002  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   00 0B 00 04 00 02 00 03  7F FF FF FF 7B FF F7 FF   "............{..."
	: .pc
	  PC=0FF2B2  ?  ff200
	  CCR=85  ?  . 
	: m ff800 
	  FF800   00  ?  ff
	  FF801   0B  ?  f5
	  FF802   00  ?  00
	  FF803   04  ?  04
	  FF804   00  ?  .            
	: g
	  Break at PC=FF2B2
	  PC=0FF2B2  CCR=A5:I.H..Z.C  SP=000FFF00
	  ER0=0001FFFD  ER1=FFFD0002  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   FF F5 00 04 FF FD 00 01  7F FF FF FF 7B FF F7 FF   "............{..."
	: .pc
	  PC=0FF2B2  ?  ff200
	  CCR=A5  ?  .
	: m ff800
	  FF800   FF  ?  00
	  FF801   F5  ?  0b
	  FF802   00  ?  ff
	  FF803   04  ?  fc
	  FF804   FF  ?  .
	: g
	  Break at PC=FF2B2
	  PC=0FF2B2  CCR=A5:I.H..Z.C  SP=000FFF00
	  ER0=0003FFFE  ER1=FFFE0002  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	: d ff8000  ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   00 0B FF FC FF FE 00 03  7F FF FF FF 7B FF F7 FF   "............{..."
	: .pc
	  PC=0FF2B2  ?  ff200
	  CCR=A5  ?  .
	: m ff800
	  FF800   00  ?  ff
	  FF801   0B  ?  f5
	  FF802   FF  ?  ff
	  FF803   FC  ?  fc
	  FF804   FF  ?  .
	: g
	  Break at PC=FF2B2
	  PC=0FF2B2  CCR=84:I....Z..  SP=000FFF00
	  ER0=00010000  ER1=00030002  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   FF F5 FF FC 00 03 00 01  7F FF FF FF 7B FF F7 FF   "............{..."
3．考察
	動作結果を見て、A/Bをした時に「（A - 余り）÷B＝商」の関係が成り立っているかを考える。

	1．(B)16/(4)16 動作結果のメモリの値
		(11/4)
		: d ff800 ff80f
		  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
		  FF800   00 0B 00 04 00 02 00 03  7F FF FF FF 7B FF F7 FF   "............{..."
		これより、2あまり3であることが求まった。
		「(11-3)/4=2」より、正しく動作していると考えられる。

	2．(FFF5)16/(4)16 動作結果のメモリの値
		(-11/4)
		: d ff800 ff80f
		  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
		  FF800   FF F5 00 04 FF FD 00 01  7F FF FF FF 7B FF F7 FF   "............{..."
		これより、(FFFD)16あまり(1)16であることが求まった。
		                (-3あまり1)10
		 「(-11-1)/4=-3」より、正しく動作していると考えられる。

	3．(B)16/(FFFC)16 動作結果のメモリの値
		 (11/(-4))
		: d ff8000  ff80f
		  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
		  FF800   00 0B FF FC FF FE 00 03  7F FF FF FF 7B FF F7 FF   "............{..."
		これより、(FFFE)16あまり(3)16であることが求まった。
		              （-2あまり3)10
		「(11-3)/(-2)=(-4)」より、正しく動作していると考えられる。
	
	4．(FFF5)16/(FFFC)16 動作結果のメモリの値
	     ((-11)/(-4))
		: d ff800 ff80f
		  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
		FF800   FF F5 FF FC 00 03 00 01  7F FF FF FF 7B FF F7 FF   "............{..."
		これより、(3)16あまり(1)16であることが求まった。
		            （3あまり1)10
		「(-11-1)/(-4)=3」より、正しく動作していると考えられる。
		
4．まとめ
	mon2ex07を応用し、負の数の割り算プログラムをアセンブラ言語を用いて実装することができた。
	負の数の割り算でも，正の数の割り算と同じアルゴリズムで商とあまりを求めることができるため，
	符号の処理を加えるだけで実装できる．

