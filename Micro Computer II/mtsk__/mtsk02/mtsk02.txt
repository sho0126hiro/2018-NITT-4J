/***  mtsk02.txt  ***/

1．課題
	「2つのタスク切り替えのプログラム」を２つ紹介してあるが，どちらかを改造して3つのタスクが順番に
	動作するプログラムを作成し，報告しなさい。
	プログラミングは「４」のtaskSwitcherDemoB1.c，taskSwitcherDemoB2.cを使った方が容易かもしれない。

	ただし3つ目のタスクは

	task2 10001
	task2 10002
	task2 10003
	  :

	のように先の2つの例（taskSwitcherDemo1.c，taskSwitcherDemo2.c）と同様に表示するものとする。
	提出課題には2周分（task0→task1→task2→task0→task1→task2）の実行結果を貼付すること。

	ヒント　現行の２つのタスクに加え，３つ目のタスクを用意する。コンテキストバッファも3つ必要となる。
	現在どのタスクを実行しているかを示す変数taskswは0,1,2を繰り返すようにする。
	タスクスイッチャは起動時にtaskswを見て，コンテキストを対応するコンテキストバッファに退避させる。
	（taskswが0なら，コンテキストバッファ0に，taskswが1なら，コンテキストバッファ1に，..）
	taskswの値を変化させる。（0→1,1→2,2→0）
	変化したtaskswを見ながら対応するコンテキストバッファの内容をコンテキストに戻す。
	rteでタスクスイッチャ終了。
	
2．使用したプログラム・実行結果
	// mtsk02.c
	/**********************************************************
	インターバルタイマ割り込みによって２つのタスクの切り替えを行う
	**********************************************************/
	#include <3048fone.h>
	#include "h8_3048fone.h"

	/***************　２つのタスクの実体　ここから　********************/
	void msecwait(int msec)
	/*mesc間なにもしない時間稼ぎ関数*/
	{
		int i,j;
		for (i=0;i<msec;i++) {
			for (j=0;j<1588;j++);    /*1588は実測によって求めた値*/
		}
	}

	void task0(void)
	{
		int cnt=0;
		while (1) {
			D_INT();  /*このデモでは通信中は割り込み禁止にしてリソースの競合を避けている*/
			SCI1_printf("task0 %4d\n",cnt);
			E_INT();
			msecwait(20);
			cnt++;
			if (cnt==100) cnt=0;
		}
	}

	void task1(void)
	{
		int cnt=1000;
		while (1) {
			D_INT();  /*このデモでは通信中は割り込み禁止にしてリソースの競合を避けている*/
			SCI1_printf("task1 %4d\n",cnt);
			E_INT();
			msecwait(20);
			cnt++;
			if (cnt==1100) cnt=1000;
		}
	}

	void task2(void)
	{
		int cnt=10000;
		while (1) {
			D_INT();  /*このデモでは通信中は割り込み禁止にしてリソースの競合を避けている*/
			SCI1_printf("task2 %5d\n",cnt);
			E_INT();
			msecwait(20);
			cnt++;
			if (cnt==11000) cnt=10000;
		}
	}

	/***************　２つのタスクの実体　ここまで　********************/

	typedef union {
		unsigned char Bccr;
		unsigned long int returnAddress;
	} stack_t;

	typedef struct {
		unsigned long int Ber7;   /*初期状態ではBer0をさしている*/
		unsigned char stack[128]; /*stack〜stack0の合わさったものが実際のスタック*/
		unsigned long int Ber0;   /*初期状態だけER0があると考える，後はスタックの一部*/
		unsigned long int Ber1;   /*初期状態だけER1があると考える，後はスタックの一部*/
		unsigned long int Ber2;   /*初期状態だけER2があると考える，後はスタックの一部*/
		unsigned long int Ber3;   /*初期状態だけER3があると考える，後はスタックの一部*/
		unsigned long int Ber4;   /*初期状態だけER4があると考える，後はスタックの一部*/
		unsigned long int Ber5;   /*初期状態だけER5があると考える，後はスタックの一部*/
		unsigned long int Ber6;   /*初期状態だけER6があると考える，後はスタックの一部*/
		stack_t stack0;           /*初期状態はここに戻りアドレスとCCRが入っている*/
	} context_t;

	context_t context0,context1,context2; /*コンテキストバッファの実体*/
	int tasksw=0; /* 0 または 1 または2　稼働中のタスク番号*/
	unsigned long int systemstackPtr;  /*スイッチャ用スタックポインタ退避場所*/

	main()
	{
		initLed();   /*LEDユニットの初期化　点滅させるが，動作確認用*/
		initSCI1();  /*シリアル通信の初期化*/
		SCI1_printf("\n\n\n  *** task switcher ***\n\n");
		initTimer01Int(500); /*時間割り込み500smsec ITUch0,1使用　このタイミングでタスク切り替えが起こる*/
		E_INT();        /*CPU割り込み許可*/

		/*コンテキストバッファにコンテキストを２つの作成*/
		context0.stack0.returnAddress=(unsigned long int)task0; /* task0の戻り値の設定 */
		context0.Ber7=(unsigned long int)&(context0.Ber0);/*初期化 */

		context1.stack0.returnAddress=(unsigned long int)task1;
		context1.Ber7=(unsigned long int)&(context1.Ber0);

	    context2.stack0.returnAddress=(unsigned long int)task2;
		context2.Ber7=(unsigned long int)&(context2.Ber0);

		startTimer01();  /*時間割り込みタイマスタートch0,ch1*/

		/*ここまでで2つのタスクの起動準備完了。最初はtask0を起動する*/
		tasksw=0;
	    /* 下のアセンブリコードが起動プログラム*/
	#pragma asm
	    mov.l  er7,  @_systemstackPtr  ;スイッチャのスタックポインタを退避
	    mov.l  @_context0, er7 ;タスク0のスタックポインタを復帰
	                           ; context0とcontext0.Ber7は同じアドレス
	    pop.l  er0
	    pop.l  er1
	    pop.l  er2
	    pop.l  er3
	    pop.l  er4
	    pop.l  er5
	    pop.l  er6
	    rte                            ;ReTurn from Exception によりタスク起動
	#pragma endasm

	} /*end of main*/

	/*ベクトルテーブルの設定*/
	#pragma asm
	    .SECTION    MYVEC, DATA, LOCATE=H'000070
	    .ORG        H'000070  ;IMIA1
	    .DATA.L     _TaskSwitcher
	    .SECTION    P,CODE,ALIGN=2 ;これを忘れてはいけない
	#pragma endasm

	/*
	インターバルタイマ割り込みで起動するルーチン，タスク切り替えの作業を行う
	TaskSwitcherでは次のことを行う
	（１）現在のタスクがtask0,task1,task2のどれであったか検出
	（２）現在の全レジスタをcontext0，またはcontext1として保存
	（３）次のタスクにむけてcontext0，またはcontext1を全レジスタに載せる
	（４）rteで新タスクを起動（割り込みから戻るふりをする）
	*/
	#pragma asm
	_TaskSwitcher:                   ; function: TaskSwitcher
	    ;タイマユニットに割り込みを受け付けたことを知らせる
	    BCLR.B #0,@H'FFFF71:8         ;ITU1.TSR.BIT.IMFA=0;

	    ; ** 旧コンテキスト保存 **
	    push.l er6
	    push.l er5
	    push.l er4
	    push.l er3
	    push.l er2
	    push.l er1
	    push.l er0
	    mov.w  @_tasksw, r0   ;直前のタスク番号の取得
	    cmp.w  #2, r0         ; 2と比べて
	    beq RETURNEDFROMTASK2 ; 同じなら入る
	    cmp.w  #1, r0         ; 1と比べて
	    beq RETURNEDFROMTASK1 ; 同じなら入る

	RETURNEDFROMTASK0:
	    ;直前がタスク0のときのタスクスイッチ作業
	    mov.w #1, r0         ;次のタスク番号は1
	    mov.w r0, @_tasksw   ;次のタスク番号を変数taskswに保存
	    ;スタックポインタをコンテキスト0のBer7に保存
	    mov.l  er7,  @_context0; (context0とcontext0.Ber7は同じアドレス)
	    ;コンテキスト1のBer7をスタックポインタにセット
	    mov.l  @_context1, er7 ; (context1とcontext1.Ber7は同じアドレス)
	    bra GONEXTTASK ; jump goNextTask

	RETURNEDFROMTASK1:
	    ;直前がタスク1のときのタスクスイッチ作業
	    mov.w #2, r0         ;次のタスク番号は2
	    mov.w r0, @_tasksw   ;次のタスク番号を変数taskswに保存
	    ;スタックポインタをコンテキスト１のBer7に保存
	    mov.l  er7,  @_context1; (context1とcontext1.Ber7は同じアドレス)
	    ;コンテキスト2のBer7をスタックポインタにセット
	    mov.l  @_context2, er7 ; (context2とcontext2.Ber7は同じアドレス)
	    bra GONEXTTASK ; jump goNextTask

	RETURNEDFROMTASK2:
	    ;直前がタスク2のときのタスクスイッチ作業
	    mov.w #0, r0         ;次のタスク番号は0
	    mov.w r0, @_tasksw   ;次のタスク番号を変数taskswに保存
	    ;スタックポインタをコンテキスト2のBer7に保存
	    mov.l  er7,  @_context2; (context2とcontext2.Ber7は同じアドレス)
	    ;コンテキスト0のBer7をスタックポインタにセット
	    mov.l  @_context0, er7 ; (context0とcontext0.Ber7は同じアドレス)

	GONEXTTASK:
	    pop.l  er0
	    pop.l  er1
	    pop.l  er2
	    pop.l  er3
	    pop.l  er4
	    pop.l  er5
	    pop.l  er6

	    rte

	#pragma endasm
	
	//実行結果
	  *** task switcher ***

	task0    0
	task0    1
	task0    2
	task0    3
	task0    4
	task0    5
	task0    6
	task0    7
	task0    8
	task0    9
	task0   10
	task0   11
	task0   12
	task0   13
	task0   14
	task0   15
	task0   16
	task0   17
	task0   18
	task0   19
	task0   20
	task0   21
	task0   22
	task0   23
	task0   24
	task0   25
	task0   26
	task0   27
	task0   28
	task0   29
	task0   30
	task0   31
	task0   32
	task0   33
	task0   34
	task0   35
	task0   36
	task0   37
	task0   38
	task0   39
	task0   40
	task0   41
	task0   42
	task0   43
	task0   44
	task0   45
	task0   46
	task0   47
	task0   48
	task1 1000
	task1 1001
	task1 1002
	task1 1003
	task1 1004
	task1 1005
	task1 1006
	task1 1007
	task1 1008
	task1 1009
	task1 1010
	task1 1011
	task1 1012
	task1 1013
	task1 1014
	task1 1015
	task1 1016
	task1 1017
	task1 1018
	task1 1019
	task1 1020
	task1 1021
	task1 1022
	task1 1023
	task1 1024
	task1 1025
	task1 1026
	task1 1027
	task1 1028
	task1 1029
	task1 1030
	task1 1031
	task1 1032
	task1 1033
	task1 1034
	task1 1035
	task1 1036
	task1 1037
	task1 1038
	task1 1039
	task1 1040
	task1 1041
	task1 1042
	task1 1043
	task1 1044
	task1 1045
	task1 1046
	task1 1047
	task1 1048
	task2 10000
	task2 10001
	task2 10002
	task2 10003
	task2 10004
	task2 10005
	task2 10006
	task2 10007
	task2 10008
	task2 10009
	task2 10010
	task2 10011
	task2 10012
	task2 10013
	task2 10014
	task2 10015
	task2 10016
	task2 10017
	task2 10018
	task2 10019
	task2 10020
	task2 10021
	task2 10022
	task2 10023
	task2 10024
	task2 10025
	task2 10026
	task2 10027
	task2 10028
	task2 10029
	task2 10030
	task2 10031
	task2 10032
	task2 10033
	task2 10034
	task2 10035
	task2 10036
	task2 10037
	task2 10038
	task2 10039
	task2 10040
	task2 10041
	task2 10042
	task2 10043
	task2 10044
	task2 10045
	task2 10046
	task2 10047
	task0   49
	task0   50
	task0   51
	task0   52
	task0   53
	task0   54
	task0   55
	task0   56
	task0   57
	task0   58
	task0   59
	task0   60
	task0   61
	task0   62
	task0   63
	task0   64
	task0   65
	task0   66
	task0   67
	task0   68
	task0   69
	task0   70
	task0   71
	task0   72
	task0   73
	task0   74
	task0   75
	task0   76
	task0   77
	task0   78
	task0   79
	task0   80
	task0   81
	task0   82
	task0   83
	task0   84
	task0   85
	task0   86
	task0   87
	task0   88
	task0   89
	task0   90
	task0   91
	task0   92
	task0   93
	task0   94
	task0   95
	task0   96
	task0   97
	task1 1049
	task1 1050
	task1 1051
	task1 1052
	task1 1053
	task1 1054
	task1 1055
	task1 1056
	task1 1057
	task1 1058
	task1 1059
	task1 1060
	task1 1061
	task1 1062
	task1 1063
	task1 1064
	task1 1065
	task1 1066
	task1 1067
	task1 1068
	task1 1069
	task1 1070
	task1 1071
	task1 1072
	task1 1073
	task1 1074
	task1 1075
	task1 1076
	task1 1077
	task1 1078
	task1 1079
	task1 1080
	task1 1081
	task1 1082
	task1 1083
	task1 1084
	task1 1085
	task1 1086
	task1 1087
	task1 1088
	task1 1089
	task1 1090
	task1 1091
	task1 1092
	task1 1093
	task1 1094
	task1 1095
	task1 1096
	task1 1097
	task2 10048
	task2 10049
	task2 10050
	task2 10051
	task2 10052
	task2 10053
	task2 10054
	task2 10055
	task2 10056
	task2 10057
	task2 10058
	task2 10059
	task2 10060
	task2 10061
	task2 10062
	task2 10063
	task2 10064
	task2 10065
	task2 10066
	task2 10067
	task2 10068
	task2 10069
	task2 10070
	task2 10071
	task2 10072
	task2 10073
	task2 10074
	task2 10075
	task2 10076
	task2 10077
	task2 10078
	task2 10079
	task2 10080
	task2 10081
	task2 10082
	task2 10083
	task2 10084
	task2 10085
	task2 10086
	task2 10087
	task2 10088
	task2 10089
	task2 10090
	task2 10091
	task2 10092
	task2 10093
	task2 10094
	task2 10095
	task0   98
	task0   99
	task0    0
	task0    1
	task0    2
	task0    3
	task0    4
	task0    5
	task0    6
	task0    7
	task0    8
	task0    9
	task0   10
	task0   11
	task0   12
	task0   13
	task0   14
	task0   15
	task0   16
	task0   17
	task0   18
	task0   19
	task0   20
	task0   21
	task0   22
	task0   23
	task0   24
	task0   25
	task0   26
	task0   27
	task0   28
	task0   29
	task0   30
	task0   31
	task0   32
	task0   33
	task0   34
	task0   35
	task0   36
	task0   37
	task0   38
	task0   39
	task0   40
	task0   41
	task0   42
	task0   43
	task0   44
	task0   45
	task0   46
	task1 1098
	task1 1099
	task1 1000
	task1 1001
	task1 1002
	task1 1003
	task1 1004
	task1 1005
	task1 1006
	task1 1007
	task1 1008
	task1 1009
	task1 1010
	task1 1011
	task1 1012
	task1 1013
	task1 1014
	task1 1015
	task1 1016
	task1 1017
	task1 1018
	task1 1019
	task1 1020
	task1 1021
	task1 1022
	task1 1023
	task1 1024
	task1 1025
	task1 1026
	task1 1027
	task1 1028
	task1 1029
	task1 1030
	task1 1031
	task1 1032
	task1 1033
	task1 1034
	task1 1035
	task1 1036
	task1 1037
	task1 1038
	task1 1039
	task1 1040
	task1 1041
	task1 1042
	task1 1043
	task1 1044
	task1 1045
	task1 1046
	task2 10096
	task2 10097
	task2 10098
	task2 10099
	task2 10100
	task2 10101
	task2 10102
	task2 10103
	task2 10104
	task2 10105
	task2 10106
	task2 10107
	task2 10108
	task2 10109
	task2 10110
	task2 10111
	task2 10112
	task2 10113
	task2 10114
	task2 10115
	task2 10116
	task2 10117
	task2 10118
	task2 10119
	task2 10120
	task2 10121
	task2 10122
	task2 10123
	task2 10124
	task2 10125
	task2 10126
	task2 10127
	task2 10128
	task2 10129
	task2 10130
	task2 10131
	task2 10132
	task2 10133
	task2 10134
	task2 10135
	task2 10136
	task2 10137
	task2 10138
	task2 10139
	task2 10140
	task2 10141
	task2 10142
	task2 10143
	task0   47
	task0   48
	task0   49
	task0   50
	task0   51
	task0   52
	task0   53
	::::::::::
	
3．考察
	プログラムの大まかな流れを以下に示す．
	
	必要なグローバル変数・構造体の宣言
	
	main :
		LEDユニット，シリアル通信の初期化，表示
		割り込み許可
		コンテキストバッファにコンテキストを3つ追加する．
		それぞれに対して，taskの戻り値の設定,初期化を行う．
		割り込みタイマスタート
		task0の起動:
			スイッチャのポインタの対比，タスク0のスタックポインタの復帰
			現在使われている汎用レジスタの退避
	
	ベクトルテーブルの設定
	
	起動・割り込みタイマスタートから以下の動作が無限ループされる．
		現在の全レジスタをコンテキストに保存
		現在のタスクが何かを検出：
			変数taskswの値を検出し，cmp（比較），beq（前のcmpが等しいとき実行）を利用
		タスク切り替え：
			次のタスク番号を変数taskswに保存する．
			スタックポインタを現在のコンテキストの格納場所（.ber7)に保存
			次のコンテキストのスタックポインタ格納場所(.ber7)にセットする．
		次のレジスタ退避領域にある値をすべてレジスタに持ってくる

4．まとめ
	複数のタスクを切り替えるプログラムを実際に作り，動作させることで，
	タスク切り替えの手順や仕組みについて理解した．
