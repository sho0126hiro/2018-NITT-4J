/***  kadai7-2.txt  ***/

1．プログラムの仕様
	スロットマシンの制作を行った．
	3つのドラムがLCD上に表示される．
	操作方法・細かな仕様
		1．ボタン4を押すと3つのドラムが回転する
		2．ボタン1,2,3を押すと，それぞれのドラムが押した瞬間に停止する．
		3．ドラムには，0~9の数字が並んでいて，初期値は次の通りである．
			ドラム1 - 1
			ドラム2 - 2
			ドラム3 - 3
		4．それぞれのドラムは同じスピードで回転する．
		5．すべての数字がそろうと，LEDが点灯する．

2．タスクの構成・優先度・説明
次の6つのタスクを利用した．
なお、タスク宣言及び起動や、LCD等の初期設定をするタスクは省略している。

	1．タスク名：drumRoot 優先度：5
		ドラムの回転・表示を行っている。
		3つのドラムはそれぞれ別の変数で構成されており、
		変数に1増やし続けることで、ドラムが回転するような動きを実現している。
		また、ボタンの操作によって、変数に1増やすのをやめることで、
		ドラムが止まったような動きを実現している。
		
		どのボタンが押されたかについては、buttonHandlerが判定する。
		下記に示すように、buttonHandlerは、押されたボタン事にフラグレジスタの値を変える。
		
		drumRootでは、フラグレジスタの値を取得し、次のような動作を行う。
		| フラグレジスタの値 |                  処理                  |
		|         0          |              なにもしない              |
		|         1          |    ドラム1に対する回転処理を止める     |
		|         2          |    ドラム2に対する回転処理を止める     |
		|         3          |    ドラム3に対する回転処理を止める     |
		|         4          | 全てのドラムに対して回転処理を再開する |
		（回転処理とは、上記に示す変数に1加算する処理のことである。）
		
		また、全てのドラム（3つの変数）が同じ値で、かつすべての回転処理が止まっている時に
		LEDを点灯する。
		これによって、ユーザが全てのドラムがそろった時のみLEDが点灯する動作を実現している。
	2．タスク名：CYC_wupCButton 優先度：なし
		タスクcheckButtonを周期ハンドラで周期的に立ち上げるタスク
		起動周期：10[ms]

	3．タスク名：checkButton 優先度：4
		ボタンが押されたことを判定する。
		CYC_wupCButtonによって、周期10msで起動する。
		ボタンを押しているかを判定し、ボタンが押されている場合、buttonHandlerを起動する。

	4．タスク名：buttonHandler 優先度：4
		タスクcheckButtonが周期に起動している中で、ボタンが押されると
		このタスクが呼び出される。
		押されたボタンが何を示しているか判定し、押されたボタンごとに
		次のような処理を行う。
		
		| 押されたボタン |                処理               |
		|    ボタン0     | フラグレジスタの値を1にセットする |
		|    ボタン1     | フラグレジスタの値を2にセットする |
		|    ボタン2     | フラグレジスタの値を3にセットする |
		|    ボタン3     | フラグレジスタの値を4にセットする |

3．授業で学んだ機能のうち，使ったもの・利用シーン
	周期ハンドラとフラグレジスタを用いた。
	周期ハンドラ：ボタンが押されているかを周期的にチェックさせた。
	フラグレジスタ：どのボタンが押されたかを管理させた。

4．プログラムの動作説明
	周期ハンドラは10ms周期で呼び出されるが、その他の場合、drumRootが起動している。
	タスクdrumRootが通常起動しており、
	周期ハンドラによって、checkButtonは定期的に起動する。
	ここで、ボタンが押されていた場合、buttonHandlerを呼び出し、
	buttonHandlerによって、どのボタンが押されているかを判定し、
	フラグレジスタにそれに応じた値を代入している。
	
	タスクdrumRootはフラグレジスタを読み取り、それに応じた処理を行う。
	
	以上のような流れでプログラムは動作している。
