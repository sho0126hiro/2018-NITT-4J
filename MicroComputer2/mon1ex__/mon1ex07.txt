/***  mon1ex07.txt  ***/
/***  s16306  4J42  廣瀬 翔  ***/

1．課題
	FF200から機械語プログラムを置きなさい。
	スタックポインタにFFF00をセットする。
	FF800番地の2byteデータをレジスタR0に載せる
	FF802番地の2byteデータをレジスタR1に載せる
	サブルーチンをコールする
	戻ってきたらレジスタR0の値をFF804番地の2byteデータとして保存
	そして無限ループで何もしなくなる。

	ただし，サブルーチンは
	レジスタR0の値とR1の値の和を作りR0に載せ，
	リターンする

	作成したプログラム本体を報告に載せなさい。

	1命令ずつ実行すると
	ER0,ER1,ER2,PC（プログラムカウンタ）SP（スタックポインタ，ER7と同じ）,FFEF0からFFF00までのメモリの様子
	,FF800からFF80Fまでのメモリの様子
	はどうなるか，観察して，全実行結果を報告しなさい。

	以下のことを考察の文中に盛り込みなさい。
	サブルーチンコール命令によって，プログラムカウンタの値はどのように変化したのか。
	値およびその値の意味を示しなさい。
	サブルーチンコール命令実行直後のプログラムカウンタの値はサブルーチンコール命令とどのような関係になっているか。
	サブルーチンコール命令直前，直後のスタックポインタの値はどうであったか。
	サブルーチンコール命令によって，スタック領域のどの番地（複数の番地が使われたはず）には何が格納されたのか。
	値とその値の意味を答えなさい。
	またサブルーチンから戻るべきアドレスはどこに書き込まれたのか，
	スタックポインタの値との関連で考察しなさい。
	サブルーチンからのリターン命令でプログラムカウンタの値が変化するが，
	その仕組みはどうなっているのか，スタックポインタの値，プログラムカウンタとの関連で考察しなさい。

2．使用したプログラム・実行結果
	teratarmのログを以下に示す．

	  H8/3048 Series Advanced Mode Monitor Ver. 3.0A
	 Copyright (C) 2003 Renesas Technology Corp.
	
	/*プログラム入力部*/
	: a ff200
	  FF200   >  mov.l #fff00:32,er0
	  FF206   >  mov.w @ff800:24,r0
	  FF20C   >  mov.w @ff802:24,r1
	  FF212   >  bsr ff210:8
	  FF214   >  mov.w r0,@ff804:24
	  FF21A   >  bra ff21A:8
	  FF21C   >  add.w r1,r0
	  FF21E   >  rts
	  FF220   >  .
	
	/*bsr命令の書き換え*/
	: a ff212
	  FF212   >  bsr ff21c
	  FF214   >  .
	  
	/*逆アセンブルで確認*/
	: da ff200 ff21e
	  <ADDR>  <CODE>                <MNEMONIC> <OPERAND>
	  FF200   7A00000FFF00          MOV.L      #H'000FFF00:32,ER0
	  FF206   6B20000FF800          MOV.W      @H'FF800:24,R0
	  FF20C   6B21000FF802          MOV.W      @H'FF802:24,R1
	  FF212   5508                  BSR        FF21C:8
	  FF214   6BA0000FF804          MOV.W      R0,@H'FF804:24
	  FF21A   40FE                  BRA        FF21A:8
	  FF21C   0910                  ADD.W      R1,R0
	  FF21E   5470                  RTS        
	  
	/*メモリの確認*/
	: d ffef0 fff00
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FFEF0   8B DE F9 97 FE CF FE FF  D6 B4 6E EF 7B EF F2 67   "..........n.{..g"
	  FFF00   59       
	
	/*データ領域の確認*/
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   FF FF FF FF FF FE FF 7F  7F FF FF FF FB FF F7 FF   "................"
	
	/*プログラムカウンタをセット*/
	: .pc
	  PC=000000  ?  ff200
	  CCR=80  ?  .
	
	/*初期値の代入*/
	: m ff800
	  FF800   02  ?  00
	  FF801   03  ?  02
	  FF802   FF  ?  00
	  FF803   FF  ?  03
	  FF804   FF  ?  .
	  
	/*データ領域の確認*/
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   00 02 00 03 FF FE FF 7F  7F FF FF FF FB FF F7 FF   "................"
	
	/*プログラムカウンタの確認*/
	: r
	  PC=0FF200  CCR=80:I.......  SP=000FFF00
	  ER0=00000000  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	
	/*実行*/
	: s
	  PC=0FF206  CCR=80:I.......  SP=000FFF00
	  ER0=000FFF00  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF200   7A00000FFF00          MOV.L      #H'000FFF00:32,ER0
	: s
	  PC=0FF20C  CCR=80:I.......  SP=000FFF00
	  ER0=000F0002  ER1=00000000  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF206   6B20000FF800          MOV.W      @H'FF800:24,R0
	: s
	  PC=0FF212  CCR=80:I.......  SP=000FFF00
	  ER0=000F0002  ER1=00000003  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF20C   6B21000FF802          MOV.W      @H'FF802:24,R1
	: s
	  PC=0FF21C  CCR=80:I.......  SP=000FFEFC
	  ER0=000F0002  ER1=00000003  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEFC
	  FF212   5508                  BSR        FF21C:8
	
	/*スタックメモリの確認*/
	: d ffef0 fff00
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FFEF0   8B DE F9 97 80 80 28 1A  00 0F F2 1E 00 0F F2 14   "......(........."
	  FFF00   59 
	
	/*実行続き*/
	: s
	  PC=0FF21E  CCR=80:I.......  SP=000FFEFC
	  ER0=000F0005  ER1=00000003  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEFC
	  FF21C   0910                  ADD.W      R1,R0
	: s
	  PC=0FF214  CCR=80:I.......  SP=000FFF00
	  ER0=000F0005  ER1=00000003  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF21E   5470                  RTS        
	: s
	  PC=0FF21A  CCR=80:I.......  SP=000FFF00
	  ER0=000F0005  ER1=00000003  ER2=00000000  ER3=00000000
	  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
	  FF214   6BA0000FF804          MOV.W      R0,@H'FF804:24
	
	/*データ領域の確認*/
	: d ff800 ff80f
	  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
	  FF800   00 02 00 03 00 05 FF 7F  7F FF FF FF FB FF F7 FF   "................"

3．考察
	サブルーチンコール命令によるプログラムカウンタの値の変化
		 コール前 >>  コール後 
		PC=0FF212 >>  PC=0FF21C
		bsr命令の後に続くアドレスに依存する．
		今回はbsr ff21cという命令を実行したため．ff21cに変化（ジャンプ）した．
		bsr [ADDRESS] : サブルーチンコール直後のプログラムカウンタの値:ADDRESS 
	
	サブルーチンコール命令によるスタックポインタの値の変化
		 コール前 >> コール後
		 000FFF00 >> 000FFEFC
		スタックメモリ
		FFEF0   8B DE F9 97 80 80 28 1A  00 0F F2 1E 00 0F F2 14
		FFEFC-FFEFF : 00 0F F2 14 になっている．
		アドレス[000FF214]にはmov.w r0,@ff804:24が入力されていて，
		関数が返ってきた次のアドレスである．
		(brsコマンドの次のプログラムが入力されているアドレス)
	
		サブルーチンコール命令によってスタックポインタの値が変化した．
		これは，サブルーチンから戻るべきアドレスである．
		スタックポインタに入力されている値はサブルーチンコール命令の
		次に書かれているアセンブリプログラムが格納されている
		アドレスの値を示す．
		
		実際に，RTS命令（リターン）が実行されているとき，
		スタックポインタFFEFCから示すアドレス（FFEFC-FFEFF）に格納されている
		アドレス0FF214にプログラムカウンタが変化している．

4．まとめ
	　サブルーチンコール命令を利用し，「関数」を含んだプログラムを動作させるこ
	とができる．
	　サブルーチンコール命令は，ジャンプ命令と似ていて，命令文の後にアドレスを
	入力すると，そのアドレスにジャンプする．しかし，普通のジャンプ命令と違い，
	返ってくるアドレス（サブルーチンコマンドの次のアセンブリプログラムが入力さ
	れているアドレスをスタックメモリに保存する．スタックに入っているデータを関
	数が終わるときに参照するため，正しく動作する．
	　スタックポインタの値を見て，これらを理解することができた．
